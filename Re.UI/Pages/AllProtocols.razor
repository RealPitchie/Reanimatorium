@page "/allprotocols"

@using Re.Core.Models;
@using Re.Core.Models.Hemo
@using Re.Services.Services.Hemo
@using Re.UI.Pages.Components.Protocol
@using Re.Services.Services
@using System.ComponentModel;

@inject ProtocolService ProtocolService
@inject NavigationManager Navigation

<MudContainer>
    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="GetCentralVeinProtocols">Центральные Протоколы</MudButton>
    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="GetArteriaProtocols">Артериальные Протоколы</MudButton>
    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="GetEpiduralProtocols">Эпидуральные Протоколы</MudButton>
    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="GetAllProtocols">Все Протоколы</MudButton>
</MudContainer>

<MudTable Items="@allProtocols" Striped="true" Hover="true">
    <HeaderContent>
        <MudTh>Тип Протокола</MudTh>
        <MudTh>Дата</MudTh>
        <MudTh>Доктор</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd>@context.Name</MudTd>
        <MudTd @onclick="@(() => ShowProtocolDetails(@context))">
            @context.Time @context.Date.ToShortDateString()
        </MudTd>
            <MudTd>@context.Doctor.Name</MudTd>
        </RowTemplate>
    </MudTable>

@code {


    private void ShowProtocolDetails(StandardProtocol protocol)
    {
        Navigation.NavigateTo($"/ProtocolCard/{protocol.Id}");
    }


    List<StandardProtocol> allProtocols = new();

    private async Task GetCentralVeinProtocols() 
    {

        var protocols = await ProtocolService.GetProtocolsAsync(typeof(CentralVeinProtocol));
        allProtocols = protocols.ToList();
        StateHasChanged();
    }

    private async Task GetArteriaProtocols()
    {
        var protocols = await ProtocolService.GetProtocolsAsync(typeof(ArteriaProtocol));
        allProtocols = protocols.ToList();
        StateHasChanged();
    }

    private async Task GetEpiduralProtocols()
    {
        var protocols = await ProtocolService.GetProtocolsAsync(typeof(EpiduralSpaceProtocol));
        allProtocols = protocols.ToList();
        StateHasChanged(); 
    }

    private async Task GetAllProtocols()
    {
        var standardProtocols = await ProtocolService.GetProtocolsAsync();
        allProtocols = standardProtocols.ToList();
        StateHasChanged(); // Обновление состояния для перерисовки таблицы
    }
}
