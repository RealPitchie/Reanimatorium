@using Re.Core.Models
@using Re.UI.Data
@using Re.Services.Services
@using Re.UI.Pages.Components

@inject ProtocolService _service

<MudGrid Justify="Justify.FlexStart">
    <MudItem>
        <MudDatePicker style="width: 150px;" Label="Дата" DateChanged="@((e) => DateChanged(e))"/>
    </MudItem>
    <MudItem>
        <MudTimePicker style="width: 150px;" Label="Время" @bind-Time="time" />
    </MudItem> 
</MudGrid>

<MudGrid>
    <MudItem xs="8">
        @* протокол центральной вены *@
        @if(isCentralVein )
        {
            <Prot_Standard_CentralVein />

        }
        @* протокол артерии *@
        @if(isArteria )
        {
           <Prot_Standard_Arteria />
        }
        @* протокол эпидурального пространства *@
        @if(isEpidural )
        {
             <Prot_Standard_Epidural />
        }
    </MudItem> 
    <MudItem xs="4">
        <MudGrid Style="position: sticky; top: 100px; right: 50px">
            <MudItem xs="2">
                <MudToggleIconButton Icon="@Icons.Material.Filled.CheckBoxOutlineBlank" Color="@Color.Error" Title="Выкл"
                    ToggledIcon="@Icons.Material.Filled.CheckBox" ToggledColor="@Color.Success" ToggledChanged="CentralToggled" ToggledTitle="Вкл"/>
            </MudItem>
            <MudItem xs="10">
                <span>Протокол катетеризации центральной вены</span>
            </MudItem>
        </MudGrid> 
        <MudGrid Style="position: sticky; top: 175px; right: 50px">
            <MudItem xs="2">
                <MudToggleIconButton Icon="@Icons.Material.Filled.CheckBoxOutlineBlank" Color="@Color.Error" ToggledChanged="ArteriaToggled" Title="Выкл"
                    ToggledIcon="@Icons.Material.Filled.CheckBox" ToggledColor="@Color.Success" ToggledTitle="Вкл"/>
            </MudItem>
            <MudItem xs="10">
                <span>Протокол катетеризации артерии</span>
            </MudItem>
        </MudGrid >
        <MudGrid Style="position: sticky; top: 250px; right: 50px">
            <MudItem xs="2">
                <MudToggleIconButton Icon="@Icons.Material.Filled.CheckBoxOutlineBlank" Color="@Color.Error" ToggledChanged="EpiduralToggled" Title="Выкл"
                    ToggledIcon="@Icons.Material.Filled.CheckBox" ToggledColor="@Color.Success" ToggledTitle="Вкл"/>
            </MudItem>
            <MudItem xs="10">
                <span>Протокол катетеризации эпидурального пространства</span>
            </MudItem>
        </MudGrid>
        
        
        
    </MudItem>
    
</MudGrid>
<MudTable Style=""   
        T="StandardProtocol"
        Items="@_protocols" 
        Dense="@true" 
        Hover="@true"
        Bordered="@false" 
        Striped="@true"   >
    <ToolBarContent>
        <MudText Typo="Typo.h6">Протоколы</MudText>
        <MudSpacer />
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Файл</MudTh> 
        <MudTh>Автор</MudTh>
    </HeaderContent>
    <RowTemplate >
        <MudTd style="cursor: pointer" DataLabel="Name">@context.Name</MudTd> 
        <MudTd style="cursor: pointer" DataLabel="Date">@context.Doctor.Name</MudTd> 
    </RowTemplate>
     
</MudTable>
 <MudButton OnClick="GetARProtocols" Variant="Variant.Filled" >
    Получить
 </MudButton>
@* ////////////////////// *@
@code{
    List<Doctor> Doctors = new();
    DateTime? date;
    TimeSpan? time; 


    Func<Doctor,string> converter = d => d?.Name;

    bool isCentralVein, isArteria, isEpidural;
    List<StandardProtocol> _protocols = new();

    protected override async Task OnInitializedAsync()
    {
        time = DateTime.Now.TimeOfDay;
        date = DateTime.Now;
        Doctors.Add(new Doctor { Name = "Test Doctor", Id = Guid.NewGuid().ToString(), Position = "Test position" });
    } 
    void CentralToggled(bool value)
    { 
       isCentralVein = value;
    }
    void ArteriaToggled(bool value)
    { 
        isArteria = value;
    }
    void EpiduralToggled(bool value)
    { 
        isEpidural = value;
    }
    void DateChanged(DateTime? value)
    {
        date = value;
        StateHasChanged();
    }
    async Task GetARProtocols()
    {
        _protocols = await _service.GetProtocolsAsync();
    }
    
}