// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Re.Data;

#nullable disable

namespace Re.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20231218121027_NewProt")]
    partial class NewProt
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.25")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Re.Core.Models.ArteriaIndications", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<bool>("AllowControl")
                        .HasColumnType("boolean");

                    b.Property<bool>("AllowPiccoMonitoring")
                        .HasColumnType("boolean");

                    b.Property<bool>("AllowPressureMonitoring")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("ArteriaIndications");
                });

            modelBuilder.Entity("Re.Core.Models.CentralVeinIndications", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<bool>("AllowHemocorrection")
                        .HasColumnType("boolean");

                    b.Property<bool>("AllowInfusionTherapy")
                        .HasColumnType("boolean");

                    b.Property<bool>("AllowParenteralNutrition")
                        .HasColumnType("boolean");

                    b.Property<bool>("AllowVenoseAccess")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("CentralVeinIndications");
                });

            modelBuilder.Entity("Re.Core.Models.Doctor", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Position")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Doctor");
                });

            modelBuilder.Entity("Re.Core.Models.Epicrisis.СhestСavityRoentgen", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<bool>("AllowDiagnosticsChanges")
                        .HasColumnType("boolean");

                    b.Property<bool>("AllowHemopneumothoraxException")
                        .HasColumnType("boolean");

                    b.Property<bool>("AllowIdentificationInjuries")
                        .HasColumnType("boolean");

                    b.Property<bool>("AllowPositionControl")
                        .HasColumnType("boolean");

                    b.Property<bool>("AllowPostoperativeAnalysis")
                        .HasColumnType("boolean");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string>("DoctorId")
                        .HasColumnType("text");

                    b.Property<string>("Location")
                        .HasColumnType("text");

                    b.Property<string>("LocationPosition")
                        .HasColumnType("text");

                    b.Property<string>("Other")
                        .HasColumnType("text");

                    b.Property<TimeOnly>("Time")
                        .HasColumnType("time without time zone");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("ChestСavityRoentgens");
                });

            modelBuilder.Entity("Re.Core.Models.Epicrisis.AbdominalCavityRoentgen", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<bool>("AllowGasAvailable")
                        .HasColumnType("boolean");

                    b.Property<bool>("AllowPassageRating")
                        .HasColumnType("boolean");

                    b.Property<bool>("AllowPositionControl")
                        .HasColumnType("boolean");

                    b.Property<bool>("AllowPostoperativeAnalysis")
                        .HasColumnType("boolean");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string>("DoctorId")
                        .HasColumnType("text");

                    b.Property<string>("Location")
                        .HasColumnType("text");

                    b.Property<string>("LocationPosition")
                        .HasColumnType("text");

                    b.Property<string>("Other")
                        .HasColumnType("text");

                    b.Property<TimeOnly>("Time")
                        .HasColumnType("time without time zone");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("AbdominalRoentgens");
                });

            modelBuilder.Entity("Re.Core.Models.Epicrisis.TomographicExploration", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string>("DoctorId")
                        .HasColumnType("text");

                    b.Property<string>("ExplorationType")
                        .HasColumnType("text");

                    b.Property<string>("Indication")
                        .HasColumnType("text");

                    b.Property<bool>("IsAbdominalCavity")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCervicalSpine")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsContrasted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHead")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPelvicCavity")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsThoracicCavity")
                        .HasColumnType("boolean");

                    b.Property<string>("Other")
                        .HasColumnType("text");

                    b.Property<TimeOnly>("Time")
                        .HasColumnType("time without time zone");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("TomographicExplorations");
                });

            modelBuilder.Entity("Re.Core.Models.Epicrisis.Transferable", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Abdomen")
                        .HasColumnType("text");

                    b.Property<string>("AgreedWith")
                        .HasColumnType("text");

                    b.Property<int[]>("ArtherialPressure")
                        .HasColumnType("integer[]");

                    b.Property<string>("Auscultatory")
                        .HasColumnType("text");

                    b.Property<string>("Breathing")
                        .HasColumnType("text");

                    b.Property<string>("ChiefId")
                        .HasColumnType("text");

                    b.Property<string>("Condition")
                        .HasColumnType("text");

                    b.Property<string>("Conscience")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DateFrom")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateTo")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Department")
                        .HasColumnType("text");

                    b.Property<string>("Diagnosis")
                        .HasColumnType("text");

                    b.Property<string>("Diuresis")
                        .HasColumnType("text");

                    b.Property<string>("DoctorId")
                        .HasColumnType("text");

                    b.Property<string>("Drainage")
                        .HasColumnType("text");

                    b.Property<string>("DynamicsState")
                        .HasColumnType("text");

                    b.Property<string>("Hemodynamics")
                        .HasColumnType("text");

                    b.Property<string>("InflammationSigns")
                        .HasColumnType("text");

                    b.Property<string>("OngoingTherapy")
                        .HasColumnType("text");

                    b.Property<int>("Ps")
                        .HasColumnType("integer");

                    b.Property<string>("ReasonsHere")
                        .HasColumnType("text");

                    b.Property<string>("Recomended")
                        .HasColumnType("text");

                    b.Property<int>("RespiratoryRate")
                        .HasColumnType("integer");

                    b.Property<string[]>("SkinCovers")
                        .HasColumnType("text[]");

                    b.Property<int>("Temperature")
                        .HasColumnType("integer");

                    b.Property<string>("TransferCavacatheter")
                        .HasColumnType("text");

                    b.Property<string>("TransferEpiduralCavacatheter")
                        .HasColumnType("text");

                    b.Property<int>("VentricularReduce")
                        .HasColumnType("integer");

                    b.Property<string[]>("Wheezes")
                        .HasColumnType("text[]");

                    b.HasKey("Id");

                    b.HasIndex("ChiefId");

                    b.HasIndex("DoctorId");

                    b.ToTable("TransferableEpicrisis");
                });

            modelBuilder.Entity("Re.Core.Models.EpiduralSpaceIndications", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<bool>("AllowAcutePancreatitisTreatment")
                        .HasColumnType("boolean");

                    b.Property<bool>("AllowIntestinalStimulation")
                        .HasColumnType("boolean");

                    b.Property<bool>("AllowPainSyndromeTreatment")
                        .HasColumnType("boolean");

                    b.Property<bool>("AllowPostoperativeAnesthesia")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("EpiduralSpaceIndications");
                });

            modelBuilder.Entity("Re.Core.Models.EsCCO", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("EsCCC")
                        .HasColumnType("integer");

                    b.Property<int>("EsHCB")
                        .HasColumnType("integer");

                    b.Property<int>("EsHCI")
                        .HasColumnType("integer");

                    b.Property<int>("EsICCC")
                        .HasColumnType("integer");

                    b.Property<int>("EsIYO")
                        .HasColumnType("integer");

                    b.Property<int>("EsYO")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("EsCCO");
                });

            modelBuilder.Entity("Re.Core.Models.Extubation", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("Ad")
                        .HasColumnType("integer");

                    b.Property<int>("Chss")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DoctorId")
                        .HasColumnType("text");

                    b.Property<int>("Insuflation")
                        .HasColumnType("integer");

                    b.Property<string>("MedSedation")
                        .HasColumnType("text");

                    b.Property<string>("MuscleTone")
                        .HasColumnType("text");

                    b.Property<int>("Sat")
                        .HasColumnType("integer");

                    b.Property<TimeSpan>("Time")
                        .HasColumnType("interval");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("ExtubationDiaries");
                });

            modelBuilder.Entity("Re.Core.Models.FioTrac", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("CCO")
                        .HasColumnType("integer");

                    b.Property<int>("CVP")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("SV")
                        .HasColumnType("integer");

                    b.Property<int>("SVR")
                        .HasColumnType("integer");

                    b.Property<int>("SVV")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("FioTrac");
                });

            modelBuilder.Entity("Re.Core.Models.Hemo.ErythrocyteProtocol", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AD")
                        .HasColumnType("text");

                    b.Property<string>("AD2hafter")
                        .HasColumnType("text");

                    b.Property<string>("ADhafter")
                        .HasColumnType("text");

                    b.Property<string>("Anamnesis")
                        .HasColumnType("text");

                    b.Property<string>("BiologicalSample")
                        .HasColumnType("text");

                    b.Property<int>("Code")
                        .HasColumnType("integer");

                    b.Property<string>("Compatibility")
                        .HasColumnType("text");

                    b.Property<string>("Complications")
                        .HasColumnType("text");

                    b.Property<string>("Component")
                        .HasColumnType("text");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Diuresis")
                        .HasColumnType("text");

                    b.Property<string>("Diuresis2hafter")
                        .HasColumnType("text");

                    b.Property<string>("Diuresishafter")
                        .HasColumnType("text");

                    b.Property<string>("DoctorId")
                        .HasColumnType("text");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("interval");

                    b.Property<string>("FIO")
                        .HasColumnType("text");

                    b.Property<string>("Group")
                        .HasColumnType("text");

                    b.Property<string>("GroupDonor")
                        .HasColumnType("text");

                    b.Property<string>("HR")
                        .HasColumnType("text");

                    b.Property<string>("HR2hafter")
                        .HasColumnType("text");

                    b.Property<string>("HRhafter")
                        .HasColumnType("text");

                    b.Property<string>("Indication")
                        .HasColumnType("text");

                    b.Property<string>("Mfr")
                        .HasColumnType("text");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<int>("NumberCont")
                        .HasColumnType("integer");

                    b.Property<string>("Phenotype")
                        .HasColumnType("text");

                    b.Property<string>("Place")
                        .HasColumnType("text");

                    b.Property<string>("Reagents")
                        .HasColumnType("text");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("interval");

                    b.Property<string>("T")
                        .HasColumnType("text");

                    b.Property<string>("T2hafter")
                        .HasColumnType("text");

                    b.Property<string>("Thafter")
                        .HasColumnType("text");

                    b.Property<string>("Transfusion")
                        .HasColumnType("text");

                    b.Property<int>("Volume")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("ErythrocyteProtocols");
                });

            modelBuilder.Entity("Re.Core.Models.Hemo.HemoEpicrisis", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("Age")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Diagnosis")
                        .HasColumnType("text");

                    b.Property<string>("DoctorId")
                        .HasColumnType("text");

                    b.Property<string>("EritGroup")
                        .HasColumnType("text");

                    b.Property<string>("FIO")
                        .HasColumnType("text");

                    b.Property<string>("GroupRh")
                        .HasColumnType("text");

                    b.Property<string>("Hemotransfusion")
                        .HasColumnType("text");

                    b.Property<string>("Indications")
                        .HasColumnType("text");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<string>("SZPGroup")
                        .HasColumnType("text");

                    b.Property<TimeSpan>("Time")
                        .HasColumnType("interval");

                    b.Property<string>("TrombGroup")
                        .HasColumnType("text");

                    b.Property<string>("danerit")
                        .HasColumnType("text");

                    b.Property<string>("danszp")
                        .HasColumnType("text");

                    b.Property<string>("dantromb")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("HemoEpicrises");
                });

            modelBuilder.Entity("Re.Core.Models.Hemo.SZPProtocol", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AD")
                        .HasColumnType("text");

                    b.Property<string>("AD2hafter")
                        .HasColumnType("text");

                    b.Property<string>("ADhafter")
                        .HasColumnType("text");

                    b.Property<string>("Anamnesis")
                        .HasColumnType("text");

                    b.Property<string>("BiologicalSample")
                        .HasColumnType("text");

                    b.Property<int>("Code")
                        .HasColumnType("integer");

                    b.Property<string>("Compatibility")
                        .HasColumnType("text");

                    b.Property<string>("Complications")
                        .HasColumnType("text");

                    b.Property<string>("Component")
                        .HasColumnType("text");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Diuresis")
                        .HasColumnType("text");

                    b.Property<string>("Diuresis2hafter")
                        .HasColumnType("text");

                    b.Property<string>("Diuresishafter")
                        .HasColumnType("text");

                    b.Property<string>("DoctorId")
                        .HasColumnType("text");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("interval");

                    b.Property<string>("FIO")
                        .HasColumnType("text");

                    b.Property<string>("Group")
                        .HasColumnType("text");

                    b.Property<string>("GroupDonor")
                        .HasColumnType("text");

                    b.Property<string>("HR")
                        .HasColumnType("text");

                    b.Property<string>("HR2hafter")
                        .HasColumnType("text");

                    b.Property<string>("HRhafter")
                        .HasColumnType("text");

                    b.Property<string>("Indication")
                        .HasColumnType("text");

                    b.Property<string>("Mfr")
                        .HasColumnType("text");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<int>("NumberCont")
                        .HasColumnType("integer");

                    b.Property<string>("Phenotype")
                        .HasColumnType("text");

                    b.Property<string>("Place")
                        .HasColumnType("text");

                    b.Property<string>("Reagents")
                        .HasColumnType("text");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("interval");

                    b.Property<string>("T")
                        .HasColumnType("text");

                    b.Property<string>("T2hafter")
                        .HasColumnType("text");

                    b.Property<string>("Thafter")
                        .HasColumnType("text");

                    b.Property<string>("Transfusion")
                        .HasColumnType("text");

                    b.Property<int>("Volume")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("SZPProtocols");
                });

            modelBuilder.Entity("Re.Core.Models.Hemo.ThrombocyteProtocol", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AD")
                        .HasColumnType("text");

                    b.Property<string>("AD2hafter")
                        .HasColumnType("text");

                    b.Property<string>("ADhafter")
                        .HasColumnType("text");

                    b.Property<string>("Anamnesis")
                        .HasColumnType("text");

                    b.Property<string>("BiologicalSample")
                        .HasColumnType("text");

                    b.Property<int>("Code")
                        .HasColumnType("integer");

                    b.Property<string>("Compatibility")
                        .HasColumnType("text");

                    b.Property<string>("Complications")
                        .HasColumnType("text");

                    b.Property<string>("Component")
                        .HasColumnType("text");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Diuresis")
                        .HasColumnType("text");

                    b.Property<string>("Diuresis2hafter")
                        .HasColumnType("text");

                    b.Property<string>("Diuresishafter")
                        .HasColumnType("text");

                    b.Property<string>("DoctorId")
                        .HasColumnType("text");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("interval");

                    b.Property<string>("FIO")
                        .HasColumnType("text");

                    b.Property<string>("Group")
                        .HasColumnType("text");

                    b.Property<string>("GroupDonor")
                        .HasColumnType("text");

                    b.Property<string>("HR")
                        .HasColumnType("text");

                    b.Property<string>("HR2hafter")
                        .HasColumnType("text");

                    b.Property<string>("HRhafter")
                        .HasColumnType("text");

                    b.Property<string>("Indication")
                        .HasColumnType("text");

                    b.Property<string>("Mfr")
                        .HasColumnType("text");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<int>("NumberCont")
                        .HasColumnType("integer");

                    b.Property<string>("Phenotype")
                        .HasColumnType("text");

                    b.Property<string>("Place")
                        .HasColumnType("text");

                    b.Property<string>("Reagents")
                        .HasColumnType("text");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("interval");

                    b.Property<string>("T")
                        .HasColumnType("text");

                    b.Property<string>("T2hafter")
                        .HasColumnType("text");

                    b.Property<string>("Thafter")
                        .HasColumnType("text");

                    b.Property<string>("Transfusion")
                        .HasColumnType("text");

                    b.Property<int>("Volume")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("ThrombocyteProtocols");
                });

            modelBuilder.Entity("Re.Core.Models.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Adress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ArtPresDown")
                        .HasColumnType("integer");

                    b.Property<int>("ArtPresUp")
                        .HasColumnType("integer");

                    b.Property<string>("FIO")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Peculiarity")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Pulse")
                        .HasColumnType("integer");

                    b.Property<int>("SpO2")
                        .HasColumnType("integer");

                    b.Property<string>("VAS")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("Re.Core.Models.PiCCO", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int?>("CFI")
                        .HasColumnType("integer");

                    b.Property<int?>("CI")
                        .HasColumnType("integer");

                    b.Property<int?>("CVP")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int?>("ELWI")
                        .HasColumnType("integer");

                    b.Property<int?>("GEDI")
                        .HasColumnType("integer");

                    b.Property<int?>("ITBI")
                        .HasColumnType("integer");

                    b.Property<int?>("MAP")
                        .HasColumnType("integer");

                    b.Property<int?>("SVI")
                        .HasColumnType("integer");

                    b.Property<int?>("SVRI")
                        .HasColumnType("integer");

                    b.Property<int?>("SVV")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("PiCCO");
                });

            modelBuilder.Entity("Re.Core.Models.PiCCO2", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("CFI")
                        .HasColumnType("integer");

                    b.Property<int>("CI")
                        .HasColumnType("integer");

                    b.Property<int>("CVP")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("ELWI")
                        .HasColumnType("integer");

                    b.Property<int>("GEDI")
                        .HasColumnType("integer");

                    b.Property<int>("MAP")
                        .HasColumnType("integer");

                    b.Property<int>("PVPI")
                        .HasColumnType("integer");

                    b.Property<int>("SVI")
                        .HasColumnType("integer");

                    b.Property<int>("SVRI")
                        .HasColumnType("integer");

                    b.Property<int>("SVV")
                        .HasColumnType("integer");

                    b.Property<int>("ScvO2")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("PiCCO2");
                });

            modelBuilder.Entity("Re.Core.Models.PrescribedMedication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Doctor")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Injection")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Medication")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Purpose")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TTC")
                        .HasColumnType("integer");

                    b.Property<int>("Tablet")
                        .HasColumnType("integer");

                    b.Property<int>("Volume")
                        .HasColumnType("integer");

                    b.Property<int>("Аmpoule")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Medications");
                });

            modelBuilder.Entity("Re.Core.Models.ReceptionEpicrisis", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AVLDueTransportation")
                        .HasColumnType("text");

                    b.Property<string>("Abdomen")
                        .HasColumnType("text");

                    b.Property<string>("AbdomenText")
                        .HasColumnType("text");

                    b.Property<string>("Addition")
                        .HasColumnType("text");

                    b.Property<int[]>("ArtherialPressure")
                        .HasColumnType("integer[]");

                    b.Property<string>("Auscultatory")
                        .HasColumnType("text");

                    b.Property<int>("BR")
                        .HasColumnType("integer");

                    b.Property<string>("BreathingDisorder")
                        .HasColumnType("text");

                    b.Property<string[]>("BreathingRate")
                        .HasColumnType("text[]");

                    b.Property<string>("BreathingThrough")
                        .HasColumnType("text");

                    b.Property<string>("ComplaintText")
                        .HasColumnType("text");

                    b.Property<string>("Complaints")
                        .HasColumnType("text");

                    b.Property<string>("Condition")
                        .HasColumnType("text");

                    b.Property<string>("Conscience")
                        .HasColumnType("text");

                    b.Property<string>("Cyanosis")
                        .HasColumnType("text");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string>("DeliveredFrom")
                        .HasColumnType("text");

                    b.Property<string>("Device")
                        .HasColumnType("text");

                    b.Property<string>("Distension")
                        .HasColumnType("text");

                    b.Property<string>("DistensionText")
                        .HasColumnType("text");

                    b.Property<double>("Diuresis")
                        .HasColumnType("double precision");

                    b.Property<string>("DoctorId")
                        .HasColumnType("text");

                    b.Property<string>("Drainage")
                        .HasColumnType("text");

                    b.Property<int>("FiO2")
                        .HasColumnType("integer");

                    b.Property<int>("HeartRate")
                        .HasColumnType("integer");

                    b.Property<string>("Hemodynamics")
                        .HasColumnType("text");

                    b.Property<string>("InflammationInCatheter")
                        .HasColumnType("text");

                    b.Property<string>("Inotropes")
                        .HasColumnType("text");

                    b.Property<string>("InotropesDescription")
                        .HasColumnType("text");

                    b.Property<string>("InotropesUnits")
                        .HasColumnType("text");

                    b.Property<int>("InotropesValue")
                        .HasColumnType("integer");

                    b.Property<string>("LaboratoryData")
                        .HasColumnType("text");

                    b.Property<string>("Marbling")
                        .HasColumnType("text");

                    b.Property<string>("Mode")
                        .HasColumnType("text");

                    b.Property<string>("MuscleTone")
                        .HasColumnType("text");

                    b.Property<string>("OxygenInsufflation")
                        .HasColumnType("text");

                    b.Property<int>("PEEP")
                        .HasColumnType("integer");

                    b.Property<string>("Pain")
                        .HasColumnType("text");

                    b.Property<string>("PainText")
                        .HasColumnType("text");

                    b.Property<string>("PeripheralEdema")
                        .HasColumnType("text");

                    b.Property<string>("Peristalsis")
                        .HasColumnType("text");

                    b.Property<int>("Pinsp")
                        .HasColumnType("integer");

                    b.Property<int>("Psupp")
                        .HasColumnType("integer");

                    b.Property<int>("Pulse")
                        .HasColumnType("integer");

                    b.Property<string>("PulseRhythm")
                        .HasColumnType("text");

                    b.Property<string>("Ramsey")
                        .HasColumnType("text");

                    b.Property<int>("RespiratoryRate")
                        .HasColumnType("integer");

                    b.Property<string>("RespiratorySupport")
                        .HasColumnType("text");

                    b.Property<string>("SeverityOfCondition")
                        .HasColumnType("text");

                    b.Property<string[]>("SkinCovers")
                        .HasColumnType("text[]");

                    b.Property<int>("SpO2")
                        .HasColumnType("integer");

                    b.Property<string>("SpontaneousBreathing")
                        .HasColumnType("text");

                    b.Property<int>("Till")
                        .HasColumnType("integer");

                    b.Property<TimeOnly>("Time")
                        .HasColumnType("time without time zone");

                    b.Property<string[]>("Tongue")
                        .HasColumnType("text[]");

                    b.Property<string>("TreatmentPlan")
                        .HasColumnType("text");

                    b.Property<string>("Urine")
                        .HasColumnType("text");

                    b.Property<string>("VAS")
                        .HasColumnType("text");

                    b.Property<string[]>("VeinsToBeCatheterized")
                        .HasColumnType("text[]");

                    b.Property<int>("Volume")
                        .HasColumnType("integer");

                    b.Property<string[]>("Wheezes")
                        .HasColumnType("text[]");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("ReceptionEpicrises");
                });

            modelBuilder.Entity("Re.Core.Models.SLRProtocol", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AdditionalInfo")
                        .HasColumnType("text");

                    b.Property<string>("CallTo")
                        .HasColumnType("text");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string[]>("DefibrillationInfo")
                        .HasColumnType("text[]");

                    b.Property<string>("DoctorId")
                        .HasColumnType("text");

                    b.Property<string>("EKGMonitor")
                        .HasColumnType("text");

                    b.Property<string>("Features")
                        .HasColumnType("text");

                    b.Property<string[]>("IntravenousCatheterInfo")
                        .HasColumnType("text[]");

                    b.Property<int>("PatientAge")
                        .HasColumnType("integer");

                    b.Property<string>("PatientName")
                        .HasColumnType("text");

                    b.Property<string>("PupilCondition")
                        .HasColumnType("text");

                    b.Property<string>("PupilType")
                        .HasColumnType("text");

                    b.Property<string>("ReanimationCancelReason")
                        .HasColumnType("text");

                    b.Property<string>("ReanimationFeatures")
                        .HasColumnType("text");

                    b.Property<string>("SpontaneousBreathing")
                        .HasColumnType("text");

                    b.Property<TimeOnly>("Time")
                        .HasColumnType("time without time zone");

                    b.Property<int>("TrachealIntubationNo")
                        .HasColumnType("integer");

                    b.Property<int>("TrachealIntubationTry")
                        .HasColumnType("integer");

                    b.Property<string>("VentilationThrough")
                        .HasColumnType("text");

                    b.Property<string>("VentilationWith")
                        .HasColumnType("text");

                    b.Property<bool>("WasBaseSLRCarriedOut")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("SLRProtocols");
                });

            modelBuilder.Entity("Re.Core.Models.StandardProtocol", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ArteriaIndicationsId")
                        .HasColumnType("text");

                    b.Property<int>("CatheterInsertedCentimetres")
                        .HasColumnType("integer");

                    b.Property<string>("CatheterUsed")
                        .HasColumnType("text");

                    b.Property<string[]>("CathetersUsed")
                        .HasColumnType("text[]");

                    b.Property<string>("CentralVeinIndicationsId")
                        .HasColumnType("text");

                    b.Property<string>("Complications")
                        .HasColumnType("text");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DoctorId")
                        .HasColumnType("text");

                    b.Property<string>("EpiduralSpaceIndicationsId")
                        .HasColumnType("text");

                    b.Property<string>("Features")
                        .HasColumnType("text");

                    b.Property<bool>("IsLocalAnesthesyNeeded")
                        .HasColumnType("boolean");

                    b.Property<decimal>("LocalAnesthesyDose")
                        .HasColumnType("numeric");

                    b.Property<string>("LocalAnesthesyType")
                        .HasColumnType("text");

                    b.Property<string[]>("LocalAnesthesyTypes")
                        .HasColumnType("text[]");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<TimeOnly>("Time")
                        .HasColumnType("time without time zone");

                    b.Property<int>("TriesNo")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ArteriaIndicationsId");

                    b.HasIndex("CentralVeinIndicationsId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("EpiduralSpaceIndicationsId");

                    b.ToTable("Protocols");

                    b.HasDiscriminator<string>("Discriminator").HasValue("StandardProtocol");
                });

            modelBuilder.Entity("Re.Core.Models.StandartDiary", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string[]>("AbdominalBloating")
                        .HasColumnType("text[]");

                    b.Property<int>("Ad")
                        .HasColumnType("integer");

                    b.Property<string>("Additionally")
                        .HasColumnType("text");

                    b.Property<int>("Analyses")
                        .HasColumnType("integer");

                    b.Property<int>("AnalysesFive")
                        .HasColumnType("integer");

                    b.Property<int>("AnalysesFour")
                        .HasColumnType("integer");

                    b.Property<int>("AnalysesSix")
                        .HasColumnType("integer");

                    b.Property<int>("AnalysesThree")
                        .HasColumnType("integer");

                    b.Property<int>("AnalysesTwo")
                        .HasColumnType("integer");

                    b.Property<string>("Auscultatory")
                        .HasColumnType("text");

                    b.Property<int>("BodyTemperature")
                        .HasColumnType("integer");

                    b.Property<string>("Breathing")
                        .HasColumnType("text");

                    b.Property<int>("Cd")
                        .HasColumnType("integer");

                    b.Property<int>("CddField")
                        .HasColumnType("integer");

                    b.Property<string>("ComplaintsAbout")
                        .HasColumnType("text");

                    b.Property<string>("Conscience")
                        .HasColumnType("text");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Diuresis")
                        .HasColumnType("integer");

                    b.Property<int>("Do")
                        .HasColumnType("integer");

                    b.Property<string>("DoctorId")
                        .HasColumnType("text");

                    b.Property<int>("Dpod")
                        .HasColumnType("integer");

                    b.Property<string[]>("Drainage")
                        .HasColumnType("text[]");

                    b.Property<string[]>("DrainageTwo")
                        .HasColumnType("text[]");

                    b.Property<string>("DrinageAbout")
                        .HasColumnType("text");

                    b.Property<string>("DrinageAboutTwo")
                        .HasColumnType("text");

                    b.Property<int>("Dvdox")
                        .HasColumnType("integer");

                    b.Property<string>("EsCCOId")
                        .HasColumnType("text");

                    b.Property<string>("Extubation")
                        .HasColumnType("text");

                    b.Property<int>("Fio2")
                        .HasColumnType("integer");

                    b.Property<string>("FioTracId")
                        .HasColumnType("text");

                    b.Property<string>("Hemodynamics")
                        .HasColumnType("text");

                    b.Property<string>("InhalationO2")
                        .HasColumnType("text");

                    b.Property<string[]>("InotropicSupportOne")
                        .HasColumnType("text[]");

                    b.Property<int>("InotropicSupportOneInput")
                        .HasColumnType("integer");

                    b.Property<int>("Intravenously")
                        .HasColumnType("integer");

                    b.Property<int>("Laboratory1")
                        .HasColumnType("integer");

                    b.Property<int>("Laboratory2")
                        .HasColumnType("integer");

                    b.Property<int>("Laboratory3")
                        .HasColumnType("integer");

                    b.Property<int>("Laboratory4")
                        .HasColumnType("integer");

                    b.Property<int>("Laboratory5")
                        .HasColumnType("integer");

                    b.Property<int>("Laboratory6")
                        .HasColumnType("integer");

                    b.Property<string>("Pain")
                        .HasColumnType("text");

                    b.Property<string>("PainAbout")
                        .HasColumnType("text");

                    b.Property<int>("Pdkv")
                        .HasColumnType("integer");

                    b.Property<string>("Peristalsis")
                        .HasColumnType("text");

                    b.Property<string>("Picco2Id")
                        .HasColumnType("text");

                    b.Property<string>("PiccoId")
                        .HasColumnType("text");

                    b.Property<int>("Product")
                        .HasColumnType("integer");

                    b.Property<string>("Rass")
                        .HasColumnType("text");

                    b.Property<string>("RassThis")
                        .HasColumnType("text");

                    b.Property<string>("RespiratorySupport")
                        .HasColumnType("text");

                    b.Property<string[]>("RespiratorySupportMachine")
                        .HasColumnType("text[]");

                    b.Property<string[]>("ShortnessOfBreath")
                        .HasColumnType("text[]");

                    b.Property<string>("ShortnessOfBreathInput")
                        .HasColumnType("text");

                    b.Property<string[]>("Skin")
                        .HasColumnType("text[]");

                    b.Property<int>("SpeedFlow")
                        .HasColumnType("integer");

                    b.Property<int>("Spo2")
                        .HasColumnType("integer");

                    b.Property<string>("Stomach")
                        .HasColumnType("text");

                    b.Property<TimeSpan>("Time")
                        .HasColumnType("interval");

                    b.Property<string[]>("Tongue")
                        .HasColumnType("text[]");

                    b.Property<string>("Urine")
                        .HasColumnType("text");

                    b.Property<string>("Vash")
                        .HasColumnType("text");

                    b.Property<string>("VoLEFId")
                        .HasColumnType("text");

                    b.Property<string[]>("Wheezes")
                        .HasColumnType("text[]");

                    b.Property<int>("Сhss")
                        .HasColumnType("integer");

                    b.Property<string>("Сomplaints")
                        .HasColumnType("text");

                    b.Property<string>("Сonditions")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("EsCCOId");

                    b.HasIndex("FioTracId");

                    b.HasIndex("Picco2Id");

                    b.HasIndex("PiccoId");

                    b.HasIndex("VoLEFId");

                    b.ToTable("StandartDiaries");
                });

            modelBuilder.Entity("Re.Core.Models.Syndrom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ArtPresDown")
                        .HasColumnType("integer");

                    b.Property<int>("ArtPresUp")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Peculiarity")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Pulse")
                        .HasColumnType("integer");

                    b.Property<string>("Resuscitator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SpO2")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("VAS")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Syndroms");
                });

            modelBuilder.Entity("Re.Core.Models.VoLEF", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("CVP")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("LHEDV")
                        .HasColumnType("integer");

                    b.Property<int>("PAP")
                        .HasColumnType("integer");

                    b.Property<int>("PCWP")
                        .HasColumnType("integer");

                    b.Property<int>("PVR")
                        .HasColumnType("integer");

                    b.Property<int>("RHEDV")
                        .HasColumnType("integer");

                    b.Property<int>("RL")
                        .HasColumnType("integer");

                    b.Property<int>("RVEDV")
                        .HasColumnType("integer");

                    b.Property<int>("RVEF")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("VoLEF");
                });

            modelBuilder.Entity("Re.Core.Models.WeekendDiary", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string[]>("AbdominalBloating")
                        .HasColumnType("text[]");

                    b.Property<int>("Ad")
                        .HasColumnType("integer");

                    b.Property<string>("Additionally")
                        .HasColumnType("text");

                    b.Property<int>("Age")
                        .HasColumnType("integer");

                    b.Property<int>("Analyses")
                        .HasColumnType("integer");

                    b.Property<int>("Analyses1")
                        .HasColumnType("integer");

                    b.Property<int>("Analyses2")
                        .HasColumnType("integer");

                    b.Property<int>("Analyses3")
                        .HasColumnType("integer");

                    b.Property<int>("AnalysesFive")
                        .HasColumnType("integer");

                    b.Property<int>("AnalysesFour")
                        .HasColumnType("integer");

                    b.Property<int>("AnalysesSix")
                        .HasColumnType("integer");

                    b.Property<int>("AnalysesThree")
                        .HasColumnType("integer");

                    b.Property<int>("AnalysesTwo")
                        .HasColumnType("integer");

                    b.Property<string>("Auscultatory")
                        .HasColumnType("text");

                    b.Property<int>("BioChemistry")
                        .HasColumnType("integer");

                    b.Property<int>("BioChemistry2")
                        .HasColumnType("integer");

                    b.Property<int>("BioChemistry3")
                        .HasColumnType("integer");

                    b.Property<int>("BioChemistry4")
                        .HasColumnType("integer");

                    b.Property<int>("BioChemistry5")
                        .HasColumnType("integer");

                    b.Property<int>("BioChemistry6")
                        .HasColumnType("integer");

                    b.Property<int>("BioChemistry7")
                        .HasColumnType("integer");

                    b.Property<int>("BioChemistry8")
                        .HasColumnType("integer");

                    b.Property<int>("BodyTemperature")
                        .HasColumnType("integer");

                    b.Property<string>("Breathing")
                        .HasColumnType("text");

                    b.Property<int>("Cd")
                        .HasColumnType("integer");

                    b.Property<int>("CddField")
                        .HasColumnType("integer");

                    b.Property<string>("ComplaintsAbout")
                        .HasColumnType("text");

                    b.Property<string>("Conscience")
                        .HasColumnType("text");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Day")
                        .HasColumnType("integer");

                    b.Property<int>("Diuresis")
                        .HasColumnType("integer");

                    b.Property<int>("Do")
                        .HasColumnType("integer");

                    b.Property<string>("DoctorFiveId")
                        .HasColumnType("text");

                    b.Property<string>("DoctorFourId")
                        .HasColumnType("text");

                    b.Property<string>("DoctorId")
                        .HasColumnType("text");

                    b.Property<string>("DoctorThreeId")
                        .HasColumnType("text");

                    b.Property<string>("DoctorTwoId")
                        .HasColumnType("text");

                    b.Property<int>("Dpod")
                        .HasColumnType("integer");

                    b.Property<string[]>("Drainage")
                        .HasColumnType("text[]");

                    b.Property<string[]>("DrainageTwo")
                        .HasColumnType("text[]");

                    b.Property<string>("DrinageAbout")
                        .HasColumnType("text");

                    b.Property<string>("DrinageAboutTwo")
                        .HasColumnType("text");

                    b.Property<int>("Dvdox")
                        .HasColumnType("integer");

                    b.Property<string>("Extubation")
                        .HasColumnType("text");

                    b.Property<int>("Fio2")
                        .HasColumnType("integer");

                    b.Property<string>("Hemodynamics")
                        .HasColumnType("text");

                    b.Property<int>("Hemostasis")
                        .HasColumnType("integer");

                    b.Property<int>("Hemostasis2")
                        .HasColumnType("integer");

                    b.Property<int>("Hemostasis3")
                        .HasColumnType("integer");

                    b.Property<string>("InhalationO2")
                        .HasColumnType("text");

                    b.Property<string[]>("InotropicSupportOne")
                        .HasColumnType("text[]");

                    b.Property<int>("InotropicSupportOneInput")
                        .HasColumnType("integer");

                    b.Property<int>("Kshs")
                        .HasColumnType("integer");

                    b.Property<int>("Kshs2")
                        .HasColumnType("integer");

                    b.Property<int>("Kshs3")
                        .HasColumnType("integer");

                    b.Property<int>("Kshs4")
                        .HasColumnType("integer");

                    b.Property<int>("Kshs5")
                        .HasColumnType("integer");

                    b.Property<int>("Kshs6")
                        .HasColumnType("integer");

                    b.Property<int>("Kshs7")
                        .HasColumnType("integer");

                    b.Property<int>("Kshs8")
                        .HasColumnType("integer");

                    b.Property<int>("Kshs9")
                        .HasColumnType("integer");

                    b.Property<int>("Laboratory1")
                        .HasColumnType("integer");

                    b.Property<int>("Laboratory2")
                        .HasColumnType("integer");

                    b.Property<int>("Laboratory3")
                        .HasColumnType("integer");

                    b.Property<int>("Laboratory4")
                        .HasColumnType("integer");

                    b.Property<int>("Laboratory5")
                        .HasColumnType("integer");

                    b.Property<int>("Laboratory6")
                        .HasColumnType("integer");

                    b.Property<string>("Neurologist")
                        .HasColumnType("text");

                    b.Property<int>("OperationDay")
                        .HasColumnType("integer");

                    b.Property<string>("Pain")
                        .HasColumnType("text");

                    b.Property<string>("PainAbout")
                        .HasColumnType("text");

                    b.Property<string>("Patient")
                        .HasColumnType("text");

                    b.Property<int>("Pdkv")
                        .HasColumnType("integer");

                    b.Property<string>("Peristalsis")
                        .HasColumnType("text");

                    b.Property<int>("Picco")
                        .HasColumnType("integer");

                    b.Property<int>("Picco10")
                        .HasColumnType("integer");

                    b.Property<int>("Picco11")
                        .HasColumnType("integer");

                    b.Property<int>("Picco2")
                        .HasColumnType("integer");

                    b.Property<int>("Picco3")
                        .HasColumnType("integer");

                    b.Property<int>("Picco4")
                        .HasColumnType("integer");

                    b.Property<int>("Picco5")
                        .HasColumnType("integer");

                    b.Property<int>("Picco6")
                        .HasColumnType("integer");

                    b.Property<int>("Picco7")
                        .HasColumnType("integer");

                    b.Property<int>("Picco8")
                        .HasColumnType("integer");

                    b.Property<int>("Picco9")
                        .HasColumnType("integer");

                    b.Property<int>("Product")
                        .HasColumnType("integer");

                    b.Property<string>("Rass")
                        .HasColumnType("text");

                    b.Property<string>("RassThis")
                        .HasColumnType("text");

                    b.Property<string>("Recommended")
                        .HasColumnType("text");

                    b.Property<string>("RespiratorySupport")
                        .HasColumnType("text");

                    b.Property<string>("SeverityOfCondition")
                        .HasColumnType("text");

                    b.Property<string[]>("ShortnessOfBreath")
                        .HasColumnType("text[]");

                    b.Property<string>("ShortnessOfBreathInput")
                        .HasColumnType("text");

                    b.Property<string[]>("Skin")
                        .HasColumnType("text[]");

                    b.Property<int>("SpeedFlow")
                        .HasColumnType("integer");

                    b.Property<int>("Spo2")
                        .HasColumnType("integer");

                    b.Property<string>("Stomach")
                        .HasColumnType("text");

                    b.Property<TimeSpan>("Time")
                        .HasColumnType("interval");

                    b.Property<string[]>("Tongue")
                        .HasColumnType("text[]");

                    b.Property<string>("Urine")
                        .HasColumnType("text");

                    b.Property<string[]>("Wheezes")
                        .HasColumnType("text[]");

                    b.Property<int>("Сhss")
                        .HasColumnType("integer");

                    b.Property<string>("Сomplaints")
                        .HasColumnType("text");

                    b.Property<string>("Сonditions")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DoctorFiveId");

                    b.HasIndex("DoctorFourId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("DoctorThreeId");

                    b.HasIndex("DoctorTwoId");

                    b.ToTable("WeekendDiaries");
                });

            modelBuilder.Entity("Re.Core.Models.ArteriaProtocol", b =>
                {
                    b.HasBaseType("Re.Core.Models.StandardProtocol");

                    b.Property<string>("ArteriaToBeCatheterized")
                        .HasColumnType("text");

                    b.Property<string[]>("ArteriasToBeCatheterized")
                        .HasColumnType("text[]");

                    b.HasDiscriminator().HasValue("ArteriaProtocol");
                });

            modelBuilder.Entity("Re.Core.Models.CentralVeinProtocol", b =>
                {
                    b.HasBaseType("Re.Core.Models.StandardProtocol");

                    b.Property<int>("CVD")
                        .HasColumnType("integer");

                    b.Property<bool>("IsRgControlNeeded")
                        .HasColumnType("boolean");

                    b.Property<DateOnly>("RgControlDate")
                        .HasColumnType("date");

                    b.Property<string>("VeinToBeCatheterized")
                        .HasColumnType("text");

                    b.Property<string[]>("VeinsToBeCatheterized")
                        .HasColumnType("text[]");

                    b.HasDiscriminator().HasValue("CentralVeinProtocol");
                });

            modelBuilder.Entity("Re.Core.Models.Epicrisis.СhestСavityRoentgen", b =>
                {
                    b.HasOne("Re.Core.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("Re.Core.Models.Epicrisis.AbdominalCavityRoentgen", b =>
                {
                    b.HasOne("Re.Core.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("Re.Core.Models.Epicrisis.TomographicExploration", b =>
                {
                    b.HasOne("Re.Core.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("Re.Core.Models.Epicrisis.Transferable", b =>
                {
                    b.HasOne("Re.Core.Models.Doctor", "Chief")
                        .WithMany()
                        .HasForeignKey("ChiefId");

                    b.HasOne("Re.Core.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId");

                    b.Navigation("Chief");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("Re.Core.Models.Extubation", b =>
                {
                    b.HasOne("Re.Core.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("Re.Core.Models.Hemo.ErythrocyteProtocol", b =>
                {
                    b.HasOne("Re.Core.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("Re.Core.Models.Hemo.HemoEpicrisis", b =>
                {
                    b.HasOne("Re.Core.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("Re.Core.Models.Hemo.SZPProtocol", b =>
                {
                    b.HasOne("Re.Core.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("Re.Core.Models.Hemo.ThrombocyteProtocol", b =>
                {
                    b.HasOne("Re.Core.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("Re.Core.Models.ReceptionEpicrisis", b =>
                {
                    b.HasOne("Re.Core.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("Re.Core.Models.SLRProtocol", b =>
                {
                    b.HasOne("Re.Core.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("Re.Core.Models.StandardProtocol", b =>
                {
                    b.HasOne("Re.Core.Models.ArteriaIndications", "ArteriaIndications")
                        .WithMany()
                        .HasForeignKey("ArteriaIndicationsId");

                    b.HasOne("Re.Core.Models.CentralVeinIndications", "CentralVeinIndications")
                        .WithMany()
                        .HasForeignKey("CentralVeinIndicationsId");

                    b.HasOne("Re.Core.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId");

                    b.HasOne("Re.Core.Models.EpiduralSpaceIndications", "EpiduralSpaceIndications")
                        .WithMany()
                        .HasForeignKey("EpiduralSpaceIndicationsId");

                    b.Navigation("ArteriaIndications");

                    b.Navigation("CentralVeinIndications");

                    b.Navigation("Doctor");

                    b.Navigation("EpiduralSpaceIndications");
                });

            modelBuilder.Entity("Re.Core.Models.StandartDiary", b =>
                {
                    b.HasOne("Re.Core.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId");

                    b.HasOne("Re.Core.Models.EsCCO", "EsCCO")
                        .WithMany()
                        .HasForeignKey("EsCCOId");

                    b.HasOne("Re.Core.Models.FioTrac", "FioTrac")
                        .WithMany()
                        .HasForeignKey("FioTracId");

                    b.HasOne("Re.Core.Models.PiCCO2", "Picco2")
                        .WithMany()
                        .HasForeignKey("Picco2Id");

                    b.HasOne("Re.Core.Models.PiCCO", "Picco")
                        .WithMany()
                        .HasForeignKey("PiccoId");

                    b.HasOne("Re.Core.Models.VoLEF", "VoLEF")
                        .WithMany()
                        .HasForeignKey("VoLEFId");

                    b.Navigation("Doctor");

                    b.Navigation("EsCCO");

                    b.Navigation("FioTrac");

                    b.Navigation("Picco");

                    b.Navigation("Picco2");

                    b.Navigation("VoLEF");
                });

            modelBuilder.Entity("Re.Core.Models.WeekendDiary", b =>
                {
                    b.HasOne("Re.Core.Models.Doctor", "DoctorFive")
                        .WithMany()
                        .HasForeignKey("DoctorFiveId");

                    b.HasOne("Re.Core.Models.Doctor", "DoctorFour")
                        .WithMany()
                        .HasForeignKey("DoctorFourId");

                    b.HasOne("Re.Core.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId");

                    b.HasOne("Re.Core.Models.Doctor", "DoctorThree")
                        .WithMany()
                        .HasForeignKey("DoctorThreeId");

                    b.HasOne("Re.Core.Models.Doctor", "DoctorTwo")
                        .WithMany()
                        .HasForeignKey("DoctorTwoId");

                    b.Navigation("Doctor");

                    b.Navigation("DoctorFive");

                    b.Navigation("DoctorFour");

                    b.Navigation("DoctorThree");

                    b.Navigation("DoctorTwo");
                });
#pragma warning restore 612, 618
        }
    }
}
